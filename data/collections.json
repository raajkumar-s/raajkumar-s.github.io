{
    "articles": {
        "arrayandlist": {
            "title": "Array vs List",
            "header": "Should I use Array or List??",
            "items": [
                {
                    "name": "Array",
                    "merits": [
                  "Random access is allowed. Element is accessed by their index which helps in faster access to any element regardless of their position.",
                  "Each array element contains just the data that needs to be stored, nothing more nothing less."                        
               ],
                    "demerits": [
                  "Size of the array is fixed. Since the size is fixed, extending the size will be difficult and memory consuming.",
                  "Inserting element at end of the array is faster But inserting a new element in an array of elements is expensive; because room has to be created for the new elements and to create room existing elements have to be shifted.",
                  "Same as insertion, deletion is also expensive",
                  "Array has fixed size. Even if we create an array of big enough size once, then inserting & deleting elements in mid of array is very costly as other elements need to be shifted."
               ],
                    "suitable": [
                  "You need indexed/random access to elements.",
                  "You know the number of elements in the array ahead of time so that you can allocate the correct amount of memory for the array.",
                  "You need speed when iterating through all the elements in sequence. You can use pointer math on the array to access each element, whereas you need to lookup the node based on the pointer for each element in linked list, which may result in page faults which may result in performance hits.",
                  "Memory is a concern. Filled arrays take up less memory than linked lists. Each element in the array is just the data. Each linked list node requires the data as well as one (or more) pointers to the other elements in the linked list.",
                  "Array Lists (like those in .Net) give you the benefits of arrays, but dynamically allocate resources for you so that you don't need to worry too much about list size and you can delete items at any index without any effort or re-shuffling elements around. Performance-wise, arraylists are slower than raw arrays."
               ]
            },
                {
                  "name": "List",
                  "merits": [
                  "Lists don't have fixed size. Size of the list can grow/shrink on demand.",
                  "Inserting elements is faster regardless of the position.",
                  "Deletion is also faster."
               ],
                    "demerits": [
                  "Random access is not allowed. We have to access elements sequentially starting from the first node.",
                  "Each list node requires the data as well as pointers to the other elements in the linked list."
               ],
                    "suitable": [
                  "You need constant-time insertions and deletions from the list (such as in real-time computing where time predictability is absolutely critical).",
                  "You don't know how many items will be in the list. With arrays, you may need to re-declare and copy memory if the array grows too big.",
                  "You don't need random access to any elements.",
                  "You want to be able to insert items in the middle of the list (such as a priority queue)"
               ]
            }
         ],
            "conclusion": {
				"heading": "Conclusion",
				"summary": "Using a linked list is recommneded when the data is frequently updated and inserting or deleting items at arbitrary locations. Array will be faster for pretty much everything else."
			}
      },
       "listsetandmap": {
            "title": "List, Set and Map",
            "header": "Which one should I choose??",
            "items": [
            {
                "name": "List",
                "properties": [
					"List in Java provides ordered and indexed collection.",
					"List allows duplicate elements. Any number of duplicate elements can be inserted into the list without affecting the same existing values and their indexes."
                ]
            },
            {
                "name": "Set",
                "properties": [
					"Set is a collection of unique objects i.e. Set doesnâ€™t allow duplicates.",
					"Set provides an un-ordered collection."
                ]
            },
            {
                "name": "Map",
                "properties": [
					"Map holds two object per Entry e.g. key and value and it may contain duplicate values but keys are always unique.",
					"Like Set, Map is also an unordered collection. The keys are not stored in ordered way."
                ]
            }
         ],
            "conclusion": {
				"heading": "Which one to choose",
				"summary": "Based upon our understanding of difference between Set, List and Map we can now decide when to use List, Set or Map in Java.",
				"points": [
					"If you need to access elements frequently by using index, than List is a way to go. Its implementation e.g. ArrayList provides faster access if you know index.",
					"If you want to store elements and want them to maintain an order on which they are inserted into collection then go for List again, as List is an ordered collection and maintain insertion order.",
					"If you want to create collection of unique elements and don't want any duplicate than choose any Set implementation e.g. HashSet, LinkedHashSet or TreeSet. All Set implementation follow there general contract e.g. uniqueness but also add addition feature e.g. TreeSet is a SortedSet and elements stored on TreeSet can be sorted by using Comparator or Comparable in Java. LinkedHashSet also maintains insertion order.",
					"If you store data in form of key and value than Map is the way to go. You can choose from Hashtable, HashMap, TreeMap based upon your subsequent need. In order to choose between first two see difference between HashSet and HashMap in Java."
				]
			}
      }
    }
}